{"version":3,"sources":["components/ButtonsGroup.js","components/popup/Popup.js","App.js","index.js"],"names":["ButtonsGroup","onClick","options","useState","actived","setActived","map","item","index","key","name","data-time","time","className","event","target","attributes","getNamedItem","value","Popup","forwardRef","props","ref","show","setShow","toggleShow","useImperativeHandle","id","enableBackground","height","viewBox","width","xmlns","d","padTime","toString","padStart","App","title","setTitle","timeLeft","setTimeLeft","isRunning","setIsRunning","intervalRef","useRef","getValue","valueTime","document","querySelectorAll","forEach","e","i","classList","contains","dataset","minutes","Math","floor","seconds","current","clearInterval","console","log","parseInt","setInterval","ReactDOM","render","getElementById"],"mappings":"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","file":"static/js/main.fb2b4b01.chunk.js","sourcesContent":["import React, { useState } from \"react\";\r\n\r\nconst ButtonsGroup = ({ onClick, options }) => {\r\n    const [actived, setActived] = useState(0);\r\n    const renderedItems = options.map((item, index) => {\r\n        return (\r\n            <button\r\n                key={index}\r\n                name={item.name}\r\n                data-time={item.time}\r\n                className={index === actived ? \"active\" : \"\"}\r\n                onClick={(event) => {\r\n                    onClick(\r\n                        event.target.attributes.getNamedItem(\"data-time\").value\r\n                    );\r\n                    setActived(index);\r\n                }}\r\n            >\r\n                {item.name}\r\n            </button>\r\n        );\r\n    });\r\n\r\n    return renderedItems;\r\n};\r\n\r\nexport default ButtonsGroup;\r\n","import React, { useState, forwardRef, useImperativeHandle } from \"react\";\r\nimport \"./Popup.css\";\r\n\r\nconst Popup = forwardRef((props, ref) => {\r\n    const [show, setShow] = useState(false);\r\n\r\n    const toggleShow = () => {\r\n        setShow(!show);\r\n    };\r\n\r\n    useImperativeHandle(ref, () => {\r\n        return {\r\n            toggleShow: toggleShow,\r\n        };\r\n    });\r\n\r\n    return (\r\n        <div className={`popup ${show ? \"show\" : \"\"}`}>\r\n            <div className=\"popup-content\" onClick={toggleShow}>\r\n                <span className=\"popup-close\" onClick={toggleShow}>\r\n                    <svg\r\n                        id=\"Capa_1\"\r\n                        enableBackground=\"new 0 0 386.667 386.667\"\r\n                        height=\"512\"\r\n                        viewBox=\"0 0 386.667 386.667\"\r\n                        width=\"512\"\r\n                        xmlns=\"http://www.w3.org/2000/svg\"\r\n                    >\r\n                        <path d=\"m386.667 45.564-45.564-45.564-147.77 147.769-147.769-147.769-45.564 45.564 147.769 147.769-147.769 147.77 45.564 45.564 147.769-147.769 147.769 147.769 45.564-45.564-147.768-147.77z\" />\r\n                    </svg>\r\n                </span>\r\n                <p className=\"quote\">\r\n                    The Pomodoro Technique is created by Francesco Cirillo for a\r\n                    more productive way to work and study. The technique uses a\r\n                    timer to break down work into intervals, traditionally 25\r\n                    minutes in length, separated by short breaks. Each interval\r\n                    is known as a pomodoro, from the Italian word for 'tomato',\r\n                    after the tomato-shaped kitchen timer that Cirillo used as a\r\n                    university student.\r\n                </p>\r\n                <p className=\"author\">- Wikipedia</p>\r\n            </div>\r\n        </div>\r\n    );\r\n});\r\n\r\nexport default Popup;\r\n","import React, { useState, useRef } from \"react\";\r\nimport ButtonsGroup from './components/ButtonsGroup';\r\nimport \"./App.css\";\r\nimport Popup from \"./components/popup/Popup\";\r\n\r\nfunction padTime(time) {\r\n    return time.toString().padStart(2, \"0\");\r\n}\r\n\r\nconst options = [\r\n    {\r\n        name: 'Pomodoro',\r\n        time: 25\r\n    },\r\n    {\r\n        name: 'Long Break',\r\n        time: 10\r\n    },\r\n    {\r\n        name: 'Short Break',\r\n        time: 5\r\n    }\r\n];\r\n\r\nexport default function App() {\r\n    const [title, setTitle] = useState(\"Let's go!\");\r\n    const [timeLeft, setTimeLeft] = useState(25 * 60);\r\n    const [isRunning, setIsRunning] = useState(false);\r\n    const intervalRef = useRef(null);\r\n    const ref = useRef(null)\r\n\r\n    function getValue(){\r\n        const buttons = document.querySelectorAll(\".options button\");\r\n        let valueTime;\r\n        buttons.forEach((e,i) => {\r\n            if(e.classList.contains(\"active\")){\r\n                valueTime = e.dataset.time\r\n            }\r\n        })\r\n        return valueTime\r\n    }\r\n\r\n    function handleTime(value){\r\n        setTimeLeft(value * 60);\r\n        setIsRunning(false);\r\n        setTitle(\"Let's go!\");\r\n        clearInterval(intervalRef.current);\r\n        intervalRef.current = null;\r\n    }\r\n\r\n    function handlePopup(){\r\n        ref.current.toggleShow();\r\n    }\r\n\t\r\n\tfunction startTimer(){\r\n        const valueTime = getValue();\r\n        console.log(valueTime)\r\n        if(intervalRef.current !== null) return\r\n        if(parseInt(valueTime) !== 25) setTitle(\"Taking rest...\")\r\n        else setTitle(`You're doing great!`);\r\n        setIsRunning(true);\r\n\t\tintervalRef.current = setInterval(() => {\r\n\t\t\tsetTimeLeft(timeLeft => {\r\n\t\t\t\tif(timeLeft >= 1) return timeLeft - 1;\r\n\t\t\t\treturn 0;\r\n\t\t\t});\r\n        }, 1000)\r\n    }\r\n    \r\n    function stopTimer() {\r\n        if(intervalRef.current === null) return\r\n        setTitle(\"Keep it up!\")\r\n        setIsRunning(false);\r\n        clearInterval(intervalRef.current);\r\n        intervalRef.current = null;\r\n    }\r\n    \r\n    function resetTimer() {\r\n        const valueTime = getValue();\r\n        clearInterval(intervalRef.current);\r\n        setTitle(\"Let's go!\");\r\n        setTimeLeft(valueTime * 60)\r\n        setIsRunning(false);\r\n        intervalRef.current = null;\r\n    }\r\n\r\n    const minutes = padTime(Math.floor(timeLeft / 60));\r\n    const seconds = padTime(timeLeft - minutes * 60);\r\n\r\n    return (\r\n        <div className=\"app\">\r\n            <span className=\"info\" onClick={handlePopup}>?</span>\r\n            <div className=\"options\">\r\n                <ButtonsGroup options={options} onClick={handleTime}/>\r\n            </div>\r\n            <h2>{title}</h2>\r\n\r\n            <div className=\"timer\">\r\n                <span>{minutes}</span>\r\n                <span>:</span>\r\n                <span>{seconds}</span>\r\n            </div>\r\n\r\n            <div className=\"buttons\">\r\n                {!isRunning && <button onClick={startTimer}>Start</button>}\r\n                {isRunning && <button onClick={stopTimer}>Stop</button>}\r\n                <button onClick={resetTimer}>Reset</button>\r\n            </div>\r\n            <Popup ref={ref}/>\r\n        </div>\r\n    );\r\n}\r\n","import React from \"react\";\r\nimport ReactDOM from \"react-dom\";\r\nimport App from \"./App\";\r\n\r\nReactDOM.render(<App />, document.getElementById(\"root\"));\r\n"],"sourceRoot":""}